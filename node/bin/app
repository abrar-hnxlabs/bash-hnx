#!/usr/bin/env node
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env')})

const program = require('commander');
const winston = require('winston');

const { updateDnsRecord } = require(path.resolve(__dirname, '..' ,'scripts','dyn-dns.js'));
const { doCopy } = require(path.resolve(__dirname, '..' ,'scripts', 'apply-config.js'));
const { execEncode } = require(path.resolve(__dirname, '..' ,'scripts', 'handbrake.js'));
const { encrypt, decrypt } = require(path.resolve(__dirname, '..' ,'scripts', 'openssl.js'));
const { dockerRestart } = require(path.resolve(__dirname, '..' ,'scripts', 'docker.js'));


global.log = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.align(),
        winston.format.timestamp({ format: "YYYY-MM-DD HH:mm:ss" }),
        winston.format.printf((info) => `${info.timestamp} ${info.level} : ${info.message}`)
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: path.resolve(__dirname, 'app.log') })
    ]
});

log.info("Starting app.");

program
    .version('1.0.0')
    .option('-u --update_dns', 'Update the dynmic dns record')
    .option('-a --apply_config', 'apply system custom config')
    .option('-t --transcode <inputFile>', 'transcode to h265 10 bit video')
    .option('-e --encrypt <inputFile>', 'encrypt file')
    .option('-d --decrypt <inputFile>', 'decrypt file')
    .option('-r --restart_docker', 'restart the docker containers')
    .parse(process.argv);

function isRootUser() {
    return process.getuid() === 0;
}

function shutdown(exitCode = 0) {
    setTimeout(()=>{
        process.exit(exitCode);
    }, 1000);
}

async function run(program) {
    if(program.update_dns) {
        await updateDnsRecord();
    }  else if(program.transcode){
        execEncode(program.transcode)
    } else if(program.encrypt){
        await encrypt(program.encrypt)
    } else if(program.decrypt){
        await decrypt(program.decrypt)
    } else if (program.restart_docker){
        if(!isRootUser()){
            log.error('This operation requires root User. Run again as root.');
            shutdown(1);
        } else {
            await dockerRestart();
        }
    } else if(program.apply_config) {
        if(!isRootUser()){
            log.error('This operation requires root User. Run again as root.');
            shutdown(1);
        } else {
            await doCopy();
        }
    }
    else {
        log.info('use -h --help to get a list of commands');
    }
}

await run(program);
shutdown();
